/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/round": {
    /**
     * Creates a new round
     * @description Creates a new round and returns the generated ID so it can be viewed/updated.
     */
    post: operations["createRound"];
  };
  "/latest/roundID": {
    /**
     * Gets the latest round ID
     * @description Gets the round ID of the most recently created round
     */
    get: operations["getLatestRoundID"];
  };
  "/round/{roundID}": {
    /**
     * Gets round information
     * @description Gets current round information including players and latest scores
     */
    get: operations["getRound"];
  };
  "/round/{roundID}/score": {
    /**
     * Send a score event
     * @description Send a score event, overwriting an older score event if it exists
     */
    put: operations["sendScore"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Course: {
      name: string;
      tees?: string;
      holes: components["schemas"]["Hole"][];
    };
    CreatedRound: {
      id: components["schemas"]["RoundID"];
    };
    Hole: {
      hole: components["schemas"]["HoleNumber"];
      par: number;
      distanceYards?: number;
      strokeIndex?: number;
    };
    HoleNumber: number;
    HoleScore: {
      hole: components["schemas"]["HoleNumber"];
      score: number;
    };
    PlayerData: {
      name: string;
    };
    PlayerGroup: components["schemas"]["PlayerData"][];
    PlayerScore: components["schemas"]["HoleScore"][];
    PlayerScoreEvent: components["schemas"]["HoleScore"] & {
      playerIndex: number;
    };
    Round: {
      id: components["schemas"]["RoundID"];
      title: components["schemas"]["RoundTitle"];
      course: components["schemas"]["Course"];
      players: components["schemas"]["RoundPlayers"];
    };
    RoundID: string;
    RoundPlayers: components["schemas"]["RoundPlayerData"][];
    RoundPlayerData: components["schemas"]["PlayerData"] & {
      scores: components["schemas"]["PlayerScore"];
    };
    RoundTitle: string;
    RoundRequest: {
      title?: components["schemas"]["RoundTitle"];
      course: components["schemas"]["Course"];
      players: components["schemas"]["PlayerGroup"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Creates a new round
   * @description Creates a new round and returns the generated ID so it can be viewed/updated.
   */
  createRound: {
    /** @description Round information */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["RoundRequest"];
      };
    };
    responses: {
      /** @description Round created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["CreatedRound"];
        };
      };
    };
  };
  /**
   * Gets the latest round ID
   * @description Gets the round ID of the most recently created round
   */
  getLatestRoundID: {
    responses: {
      /** @description Round ID retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["RoundID"];
        };
      };
    };
  };
  /**
   * Gets round information
   * @description Gets current round information including players and latest scores
   */
  getRound: {
    parameters: {
      path: {
        roundID: string;
      };
    };
    responses: {
      /** @description Round retrieved successfully */
      200: {
        content: {
          "application/json": components["schemas"]["Round"];
        };
      };
    };
  };
  /**
   * Send a score event
   * @description Send a score event, overwriting an older score event if it exists
   */
  sendScore: {
    parameters: {
      path: {
        roundID: string;
      };
    };
    /** @description Score information */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PlayerScoreEvent"];
      };
    };
    responses: {
      /** @description Score event sent successfully */
      204: {
        content: never;
      };
    };
  };
}
